[
["index.html", "The Knowledge Chapter 1 The Knowledge", " The Knowledge Geographic Data Science Lab 2020-06-03 Chapter 1 The Knowledge In preparation to be able to stay productive while having to work fully remote, this document presents a few things jotted down in one place to help with setups, etc. The first step is a checklist everyone should go through: Do you have a computer to work on at home? Are all your relevant files accessible from home? Do you have a webcam, mic and speakers/headphones? Are you able to connect to computers on campus? This involves being setup with the University VPN? These are the basic elements you will require, so if the answer to any of the above is no, please speak with your PhD supervisor. "],
["remote-working.html", "Chapter 2 Remote Working 2.1 What is Remote Working? 2.2 Advantages and Disadvantages of Remote Work 2.3 Tips", " Chapter 2 Remote Working 2.1 What is Remote Working? “Remote work refers to organizational work that is performed outside of the normal organizational confines of space and time. The term telecommuting refers to the substitution of communications capabilities for travel to a central work location. Office automation technology permits many office workers to be potential telecommuters in that their work can be performed remotely with computer and communications support” (Olson 1983) Some of the first trials of remote working date back to the eighties as reported by Olson (1983). Since then, the spread and development of Information and Communication Technologies have brought about a significant increase in the popularity of remote work. Nowadays, it is possible to find fully remote jobs advertised particularly in IT and data science. The current pandemic has forced millions of workers at home, making remote work a necessity rather than an option. An early study on COVID-19 and remote work reported that in the US the fraction of workers who switched to working from home is about 34.1%, while 14.6% were already working from home pre-COVID-19 (Brynjolfsson et al. 2020). Not all types of work are suitable to be performed from home (Holgersen, Jia, and Svenkerud 2020), but one of the impacts of these dramatic circumstances can be a further increase of the remote work practice. Computationally intensive tasks can be easily approached in a remote setting by accessing computing resources through the network. This document will guide you in accessing servers located in the Geographic Data Science Lab to perform heavy computations.1 2.2 Advantages and Disadvantages of Remote Work One of the most direct consequences of remote work is changes in commuting behaviours, bringing about time saving and a potential reduction in traffic congestion and air pollution. These were among the main points stressed by the early advocates for remote working, but researches in transportation studies have shown conflicting results. Although reductions in number and length of commuting trips is reported in some of the earlies studies (Kitamura et al. 1991; Olson 1983), more recent research shows that the expectation that home-based telework reduces travel is not so apparent (Silva and Melo 2018) and time saving seems not to be a major pull factor (Bailey and Kurland 2002). The higher flexibility afforded by remote working is mentioned as an advantage, particularly for those who would have not taken part of the workforce without such settings because of caring committments (Olson 1983). Higher productivity of remote workers has been reported in some studies. However, it has to be noted that productivity and concentration at home are strongly dependent from environmental conditions (Bailey and Kurland 2002). Inequality in living conditions is clearly affecting the ability to work from home during the coronavirus pandemic. One of the most cited drawbacks of remote working is professional and social isolation (Bailey and Kurland 2002), which can be also seen as making more difficoult collaborative work and collective workers actions. 2.3 Tips Here a collection of tips that have been shared on the internet on how to avoid burn out and be effective while working from home: Covid-19: How to foster healthy home working Tips on working from home with children Working from home? Why detachment is crucial for mental health References "],
["vpn.html", "Chapter 3 VPN 3.1 What is a VPN? 3.2 How can I setup the VPN for Liverpool? 3.3 Windows and Mac 3.4 Ubuntu", " Chapter 3 VPN 3.1 What is a VPN? A VPN (virtual private network) connects a machine that lies outside of the university (ie. outside the firewall) to the internal network. When the VPN is running, your network traffic (e.g. Internet) is routed through the university in the same way as if the computer was on your work desk. This enables you to: Access journal websites like you would inside the university Access network drives (e.g. M Drive etc) - but be careful when transferring big files Access servers (e.g. over the terminal / command line / ftp) 3.2 How can I setup the VPN for Liverpool? This document describes how to set up a VPN. To access the VPN service: 1. Register First you will need to submit a request to register for the VPN service via CSD. CSD will need you to explain why you require VPN access and what you intend to do with it. 2. Download the VPN Client Once your registration is confirmed you will need to download and install a VPN Client. 3. Open the client and connect Finally you will need to connect to the VPN using your VPN client. Below we provide instructions on how to accomplish this on Windows, Mac and Ubuntu. 3.3 Windows and Mac You must make sure you are registered to access the VPN service first. Once you are registered you can download and install the GlobalProtect VPN Client to connect to the University network. GlobalProtect is compatible with Windows 10 and Macs. Please access admin rights before attempting to download the VPN Client on your MWS PC. It is not possible to use GlobalProtect to connect to the University network on a mobile or tablet device. To install the Client: Access Admin Rights on you PC. Visit https://vpn.liv.ac.uk Enter your University username and password to login to the VPN portal. Click the appropriate link to download the required version of the VPN client - Windows 32 bit, Windows 64 bit, or Mac OS. (To check which version you require, see your system properties on your device) Once the file has downloaded, double-click to run the installation. Follow the steps through the installation wizard, accepting the default options. Once installed you will see the GlobalProtect “globe” icon appear in the system tray (bottom right, near the clock). It is a globe and it will have a red x on it, showing that it is not currently connected. Double-click on the GlobalProtectglobe icon in the system tray. In the window that opens, enter the following: Username: enter your University username Password: enter your University password Portal: vpn.liv.ac.uk Click Apply. The GlobalProtect VPN client will then automatically connect to the University network - the red cross should disappear form the icon in the system tray. You can close the window: the client will stay connected. 3.3.1 To connect and disconnect the client Once the GlobalConnect VPN client has been installed, the icon will remain in your system tray. To connect the VPN right click the GlobalProtect icon in the system tray and choose Connect. When you have finished and want to disconnect the VPN, right click on the icon and choose Disconnect. How to allow third party applications - like Global Protect - to install on a Mac Open System Preferences and click Security &amp; Privacy Select the General tab Click the lock in the lower left-hand corner Enter your computer username and password, then select Unlock 3.4 Ubuntu The University of Liverpool provides a guide for setting up VPN on Linux, tested with Ubuntu 14.04, 16.04, 18.04 and Centos 7. The guide recommends the installation of the VPN Client VPNc: sudo apt-get install network-manager-vpnc sudo apt-get install network-manager-vpnc-gnome Alternatively yum can be used to install the software: sudo yum install NetworkManager-vpnc sudo yum install NetworkManager-vpnc-gnome To recap the remaining steps from the UoL guide: First you will need to download the UoL VPN configuration file: VPN.PCF In the top right corner of your desktop there is a network icon. Click on this icon, then choose: VPN Connections &gt; Configure VPN Click “Add” and then “Select Import” in order to locate your *.pcf file. Next enter your MWS username in the User Name field. Click the IPv4 Settings tab. If left blank fill in the Group password field using the group password specified within the *.pcf file. Add DNS servers: 138.253.110.103 138.253.110.104 and search domains (if a search domain field is available): liv.ac.uk liverpool.ac.uk livad.liv.ac.uk Click on Routes. You will need one route with the following details: Address: 138.253.0.0 Netmask: 255.255.255.0 gateway: 0.0.0.0 metric: 0 Tick the “Use this connection only for resources on its network” box. Click Save / Apply / Close depending on the distribution. 3.4.1 To connect the client and disconnect the client: To connect to the network, click on the icon in the top right corner of the desktop and choose VPN Connections &gt; University of Liverpool VPN Service You will be promted to authenticate using your MWS password. Upon connecting the network icon will display a locked symbol. You can now use your computera as if you were physically connected to the University of Liverpool network. To disconnect click on the network icon again and choose: VPN Connections &gt; Disconnect VPN "],
["ssh.html", "Chapter 4 SSH 4.1 What is SSH? 4.2 Connecting to a remote host 4.3 Unix Commands 4.4 Command Line Editors 4.5 Practical", " Chapter 4 SSH 4.1 What is SSH? Secure Shell (SSH) is a cryptographic network protocol for accessing a computer over an unsecured network. It gives you secure access to a machine’s command-line. Secure Shell provides strong password authentication and public key authentication, as well as encrypted data communications between two computers connecting over an open network, such as the internet. However, all computers within the University of Liverpool Network are not accessible from the open internet for security reasons. Therefore, to access a machine at the University you do not only need to be connected to the internet, but also to the Virtual Private Network (VPN) that virtually brings you to the University of Liverpool Network. 4.2 Connecting to a remote host The use of SSH to connect to a remote host is performed through the following command: ssh &lt;username&gt;@&lt;server.ip.address&gt; If you are connecting to a server for the first time, then you may receive the following warning: The authenticity of host &#39;hostIPaddress&#39; cannot be established. DSA key fingerprint is 01:23:45:67:89:ab:cd:ef:ff:fe:dc:ba:98:76:54:32:10. Are you sure you want to continue connecting (yes/no)? Windows users need to install an SSH client in order to access a server remotely through SSH. There are several clients available, MobaXterm is the option we advise to employ as it provides a number of useful functions for remote computing in a single application. The free edition can be downloaded here. To establish a connection with your remote server you open mobaXterm and click on session and then SSH. The Remote Host is the machine you want to access which can be identified by an IP address. IP addresses of our shared resources are listed in - add file name here-. Here you can find a simple demo of the SSH client. If this is your first time connecting to the server, or if the server has recently been reconfigured with a new key, then the above message is perfectly normal. You can proceed by typing yes and enter. Once you have accessed the server the first thing to do is to change the temprorary password we assigned to your user. user@host:~$ passwd 4.3 Unix Commands Servers often run unix operating systems such as GNU/Linux. Unix commands are essential to perform operations from the terminal. The following are the most frequently used commands: 4.3.1 List Files: user@host:~$ ls -lh In the above example two flags have been added to the ls command: -l List with long format, e.g., show file read/write/execute permissions. -h List files with readable file size, e.g. MB, GB, etc. 4.3.2 Make Directory: A new directory can be created using the mkdir command: user@host:~$ mkdir &lt;new_directory_name&gt; 4.3.3 Move: The mv command command can be used to either rename or move files and folders: user@host:~$ mv &lt;current_filename&gt; &lt;new_filename&gt; # This is to change a file name user@host:~$ mv &lt;filepath&gt; &lt;target_directory&gt; # This is to move a file to a folder user@host:~$ mv -r &lt;directory_path&gt; &lt;target_directory&gt; # This is to move a folder with all its content to an other folder We add the -r (recursive) flag to move a directory and all its contents (subdirectories and files). 4.3.4 Remove: Files and folders and can be deleted using the rm (remove) command: user@host:~$ rm &lt;filepath&gt; # To delete a file user@host:~$ rm -r &lt;directory&gt; # To delete a folder and its content Again, we add the -r (recursive) flag to remove a directory and all its contents (subdirectories and files). Warning: rm is to be used with caution. There is no trash folder from which the files can be recovered. Upon using this command the files are deleted. 4.3.5 Change your Working Directory: To change your working directory use the cd (change directory) command, specifying your target directory or .. to move back: user@host:~$ cd &lt;target_directory&gt; user@host:~$ cd .. 4.3.6 Copy: To copy files use cp. Again the -r flag can be added to recursively copy all files and subdirectories within a directory: user@host:~$ cp &lt;filename&gt; &lt;filecopy&gt; user@host:~$ cp −r &lt;directory&gt; &lt;target&gt; 4.4 Command Line Editors There exists a large number of command line editors that can be used to edit files directly within the terminal. To create a file from the terminal you can simply type the following command: user@host:~$ &gt; filename.txt Below we provide instructions for using the nano editor. To open a file in nano run the following command inside the terminal: user@host:~$ nano &lt;filename&gt; Once the file opens you can move your cursor using the arrow keys, and edit content as in any text editor. You can save any changes that you have made to the file using Ctrl + O. To close the editor press Ctrl + X. Before the editor closes you will be asked if you want to save your changes. Type Y for Yes to save changes, and N for No if you want to close the editor without saving. For an overview of nano shortcut keys you can press Ctrl + G, which will output the following list. 4.5 Practical Use SSH to access one of the lab servers (the IP address of the server you have been assigned will be provided). Change the current temporary password with a password of your choice. Create a directory with your project name. List files to check that the directory is created. Change your working directory with the project directory. Create a file, edit and save using nano. "],
["files.html", "Chapter 5 Files 5.1 Backup/sync 5.2 Encryption 5.3 File Transfer 5.4 File Download 5.5 Practical", " Chapter 5 Files You need to make sure that: You have access to all of your files; Your files are backed up so your setup is not entirely reliant on a single device; Each device on which your files are copied or from which they are accessed is encrypted. 5.1 Backup/sync The simplest and recommended way to do this at Liverpool is to keep all your files and data on your university account at OneDrive. This is part of the Office 365 Suite available from the university, you can find more info at: https://www.liverpool.ac.uk/csd/working-from-home/ There are Windows and Mac clients that work relatively well (equivalent to Dropbox client). Once you are set up, copy all your files onto your OneDrive account, which will create a copy of them in Microsoft’s secure cloud. The exception is where you have data that has requirements to be managed in particular ways - e.g. only from a single machine etc; not in the cloud. Please, be sure to speak with your PhD supervisor if you access data that may pose some challenges when moving from local machines or within the university network (remember OneDrive is in the Cloud, not the university servers!). 5.2 Encryption Disk encryption helps protect data on your devices through converting them into an unreadable format. Deciphering the data without access to the required keys is challenging. Therefore, should your devices be lost or stolen, encrypting your devices therefore introduces an additional barrier for someone attempting to access potentially sensitive data. Please note that, as per University of Liverpool guidelines, “the security of confidential information is the responsibility of the individual member of staff or student NOT the University, nor the line manager or Head of Department”. Encryption methods are platform dependent. A list of relevant guides is provided below: Windows Mac Ubuntu iOS Android 5.3 File Transfer Below we shall discuss two approaches that can be used to transfer files between two servers: File Transfer Protocol (FTP); Secure Copy Protocol (scp). 5.3.1 File Transfer Protocol (FTP) If you need to move large and/or many files from a local machine to a remote server (e.g. from your laptop to a Linux machine at the lab), you can do so using a drag and drop interface with an FTP client (e.g., filezilla for Windows/Mac/Ubuntu or WinSCP for Windows). To access a remote server you will need to enter the following into respective fields within your FTP client: Host (Remote Server IP Address); Username (Your username on the remote host); Password (Remote host password). 5.3.2 Secure Copy Protocol (scp) Alternatively Mac and Linux users can copy files between servers using the scp command. To copy a local file to a remote server: scp &lt;filepath&gt; &lt;username&gt;@&lt;server.ip.address&gt;:&lt;target_directory&gt; This command can also be use to copy a file from the remote server to your local machine: scp &lt;username&gt;@&lt;server.ip.address&gt;:&lt;filepath&gt; &lt;local_target_directory&gt;/ As with copying file locally -r can be added to the above command to recursively copy all files within a directory. However, if a directory contains a large number of files then zip your directory before executing scp. The zip file can be unzipped using: unzip &lt;filename&gt;.zip -d &lt;target_directory&gt; Tar files meanwhile can be extracted using: tar -xvzf &lt;filename&gt;.tar.gz -C &lt;target_directory&gt; 5.4 File Download Often large datasets, etc can be downloaded from the web directly. The wget command can be used to download files from both http(s) wget &#39;&lt;file_url&gt;&#39; and ftp servers: wget -r &#39;ftp://&lt;username&gt;:&lt;password&gt;@&lt;server.ip.address&gt;/&lt;directory&gt;&#39; Once the data has been downloaded we must verify that the integrity of the file. Typically the websites from which data can be downloaded provide a md5 checksum. This allows us to verify that a file has not been changed: md5sum &lt;filename&gt; 5.5 Practical 5.5.1 File Transfer Create a file named “Test.txt” locally and enter some random text. From your local machine copy “Test.txt” to your remote server using either scp or a ftp client (e.g., using WinSCP or filezilla). Upon transferring the file, ssh into the remote server and verify that the file is within the specified target directory using the ls command. (Optional) Open the file using a command line editing interface from the terminal, e.g, nano or vim: nano ./Test.txt 5.5.2 File Download For the second task we shall download the CIFAR-10 dataset from https://www.cs.toronto.edu/~kriz/cifar.html using the wget command. First we will need to determine the url from which we can download the dataset. Visit the CIFAR-10 website, right click on the “CIFAR-10 python version”, and choose the “copy link” option, which will copy the link to your clipboard. Next, ssh into your remote server. Type “wget” and paste the url into to the terminal by pressing (ctrl + shift + V). Press enter to start the file download. Upon downloading the CIFAR-10 dataset verify that the md5 checksum matches the one specified on the website. "],
["data-science-stack.html", "Chapter 6 Data Science Stack", " Chapter 6 Data Science Stack Once you have access from home to all your files and (remote) university computers, next step is easily being able to bootstrap a full data science stack that allows you to carry out scientific work. There are several ways of achieving this, but our preferred strategy is to rely on container technology, in particular on Docker. This will allow you to rapidly install the platform and set of libraries you are familiar with in a way that can be easily reproduced and redeployed (e.g. on a remote computer on campus). Here are a series of pages that will help you get a stack ready to go: setup_docker.md: instructions to install and get Docker up and running on different platforms setup_jupyterlab.md: instructions to run a JupyterLab server within a Docker container both on local (e.g. laptop) and remote (e.g. server) machines setup_rstudio.md: instructions to run Rstudio server within a Docker container both on local (e.g. laptop) and remote (e.g. server) machines. "],
["docker.html", "Chapter 7 Docker 7.1 Installation 7.2 Image and Container 7.3 Useful Docker Commands", " Chapter 7 Docker This document describes how to install and use Docker on different platforms. 7.1 Installation If you are on Mac, Linux or Windows 10 Pro/Student editions, installing Docker is relatively straightforward: Mac Linux official instructions Windows 10 Pro/Student It is important to note that, on Mac and Windows, Docker runs under a virtual machine so it will not use up all of the resources of your machine (conversely, it’ll equate to be working on a more limited machine). This can be changed. But if you need more firepower, the idea is that you develop on your laptop and scale to a server (e.g. running out of the lab). The steps to install Docker include: Obtain a copy of Docker and install it: Windows10 Pro/Enterprise: Install Docker Desktop for Windows macOS: Get started with Docker Desktop for Mac Once Docker is successfully installed, make sure to enable access to your main drive (e.g. C:\\\\): Windows10 Pro/Enterprise: Open the preferences for Docker and click the “Shared Drives” tab; click on the drive you want to add and then “Apply” macOS: this feature is automatically enabled 7.2 Image and Container Docker can be seen as a tool to generate a computer within your computer (the host). This creates a working environment that employs the host’s resources but follows its own internal rules. Image and Container are two key concepts to understand Docker processes. Images are files containing all the instructions to build a complete and executable version of an application, relying on the host OS kernel. Containers are instantiations of images, meaning that they are instances of the images running in an isolated environment. The same image can be instantiated in multiple containers. 7.3 Useful Docker Commands List available images : docker image ls See what containers are running (this also shows you the ID and which port is occupying): docker ps The run command instantiates an image in an isolated container. The generic command is: docker run [OPTIONS] IMAGE[:TAG] [COMMAND] [ARG...] Options that are generally added are: --detach or -d -&gt; Run container in background and print container ID If you do not add this option to the run command you can detach from a running docker session without exiting the shell, the escape sequence CTRL + p followed by CTRL + q can be used. To re-attach the terminal to the docker session enter: docker attach -rm -&gt; Automatically remove the container when it exits –publish or -p -&gt; Publish a container’s port(s) to the host (This is key when running server-based application through Docker. A network port is the communication enpoint in a client-server model, specifying which program a communication is intended for.) --volume or -v -&gt; Bind mount a volume All other options are listed here To stop the container you have been running you need to detach from the container using the escape sequence (unless you added -d to the run command) and send the following commands: docker ps to get the Container ID docker stop &lt;container-ID&gt; If you have not added -rm option you also need to manually remove the container docker rm -f &lt;container-ID&gt; An exemplary run command is the following: docker run -d --rm -p 8080:8787 -v ${PWD}:/data rocker/geospatial After the -p option you add the ports mapping: :. In this example, docker runs an image with r studio server which uses the port 8787 by default, but the host (the server where you are running docker) has the port 8787 already in use by other services. Therefore, you need to map the port of the image (8787) with a free port of the host (in this example 8080). After the -v option you add the paths to mount a volume::. In this example, the working directory is mapped to a data directory in the container. ${PWD} stands for Print Working Directory. "],
["jupyterlab.html", "Chapter 8 JupyterLab 8.1 Run Jupyter Lab Locally 8.2 Run Jupyter Lab Remotely 8.3 Using sudo within a container 8.4 Useful Python Docker Images 8.5 Practical", " Chapter 8 JupyterLab This document shows how to install and run a JupyterLab server locally and remotely. 8.1 Run Jupyter Lab Locally This guide assumes you meet the following requirements in your personal machine (eg. laptop): You have admin rights over your machine You are running either Windows 10 Pro, macOS, or Linux Assuming Docker is up and running (check setup_docker.md for that), you can install an “image”, which is the install that will let you run containers, by typing on a command line (Terminal.app or PowerShell are both good options): docker pull darribas/gds:4.0 This will take a while to download but, once finished, you will be ready to go. Once the command above has finished installing your GDS stack, you are ready to go! To get a Jupyter session started, you can follow these steps: Run on the same terminal as above the following command: docker run --rm -ti --user root -e NB_UID=$UID -e NB_GID=100 -p 8888:8888 -v ${PWD}:/home/jovyan/work darribas/gds:4.0 The command above spins up a container of the gds image, version 4.0 and ensures it is connected through two main bridges: Mapping your laptop’s file system from where you have launched the command (${PWD}) to a folder called work on the home directory of the container. When you login to Jupyter (see below), you will see a work folder and, if you click into it, you should see the content of your laptops folder in there. Mapping port 8888 from the container to your laptop, so you can connect to it through a browser. It is important to know this command starts a Jupyter server on your machine and keeps it running, so please do not quit the window until you are done using Jupyter, otherwise it will crash. Open your favorite browser (preferably Firefox or Chrome) and point it to localhost:8888 You will be asked for a password or a token. To find the correct one, check the terminal where you started the docker run ... command in 1) and look for the long token in the logs. Your prompt should look something (albeit not exactly) like this: docker run --rm -ti -p 8888:8888 -v ${PWD}:/home/jovyan/work darribas/gds:4.0 Executing the command: jupyter notebook [I 11:38:40.234 NotebookApp] Writing notebook server cookie secret to /home/jovyan/.local/share/jupyter/runtime/notebook_cookie_secret [I 11:38:41.328 NotebookApp] Loading IPython parallel extension [I 11:38:41.612 NotebookApp] JupyterLab extension loaded from /opt/conda/lib/python3.7/site-packages/jupyterlab [I 11:38:41.612 NotebookApp] JupyterLab application directory is /opt/conda/share/jupyter/lab [I 11:38:43.091 NotebookApp] Serving notebooks from local directory: /home/jovyan [I 11:38:43.091 NotebookApp] The Jupyter Notebook is running at: [I 11:38:43.091 NotebookApp] http://ee20e7549b49:8888/?token=4dc814ee44c64383d5d32dfd439fe62bbc17d9803d9ae434 [I 11:38:43.091 NotebookApp] or http://127.0.0.1:8888/?token=4dc814ee44c64383d5d32dfd439fe62bbc17d9803d9ae434 [I 11:38:43.091 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation). [C 11:38:43.114 NotebookApp] To access the notebook, open this file in a browser: file:///home/jovyan/.local/share/jupyter/runtime/nbserver-6-open.html Or copy and paste one of these URLs: http://ee20e7549b49:8888/?token=4dc814ee44c64383d5d32dfd439fe62bbc17d9803d9ae434 or http://127.0.0.1:8888/?token=4dc814ee44c64383d5d32dfd439fe62bbc17d9803d9ae434 The token you want to copy is the long series of letter and numbers right after ?token=, starting by 4dc814ee. The token should let you into your Jupyter Lab session. Congratulations! You can then access the files in your computer through the work directory on the left-side pane. 8.2 Run Jupyter Lab Remotely It is also possible to start a Jupyter server as above but, instead of run it on your local machine, it can run on a remote machine and you connect to that through your browser over the internet. The process in this context is a bit more intricate because you need to ensure that the connection is secure, but overall it follows a similar pattern. The following steps below assume you can login to the remote server where you want to run Jupyter through ssh and the serve already has a Docker image installed, ready to be run. Login to the remote machine: ssh &lt;username&gt;@&lt;server.ip.address&gt; Launch the container: docker run --rm -ti --user root -e NB_UID=$UID -e NB_GID=100 -p 8889:8888 -v ${PWD}:/home/jovyan/work darribas/gds:4.1 start.sh Note we are appending start.sh so it drops us into the command line of the container rather than launching the server directly Run jupyter notebook --generate-config Generate SSH keys with: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mykey.key -out mycert.pem Generate password as in the official tutorial Update /home/jovyan/.jupyter/jupyter_notebook_config.py ```python # Set options for certfile, ip, password, and toggle off # browser auto-opening c.NotebookApp.certfile = u’/home/jovyan/mycert.pem’ c.NotebookApp.keyfile = u’/home/jovyan/mykey.key’ # Set ip to ‘’ to bind on all interfaces (ips) for the public server c.NotebookApp.ip = ’’ c.NotebookApp.password = u’sha1:bcd259ccf…’ c.NotebookApp.open_browser = False # It is a good idea to set a known, fixed port for server access c.NotebookApp.port = 8888 ``` Launch secure Lab: jupyter lab On your own machine (laptop/tablet), log in to &lt;server.ip.address&gt;:8888 with the password you have set 8.2.1 Self-signed Certificate Warnings Upon accessing the notebook server your browser might warn you that your self-signed certificate is insecure or unrecognized. A fully compliant self-signed certificate is required to prevent these warnins. One approach towards solving this issue is to acquire a free SSL certificate via Let’s Encrypt. 8.3 Using sudo within a container For the above image password authentication has been disabled for the NB_USER jovyan. However, you might want to install additional programs using a package management tool (e.g., apt). To do so you can grant the within-container NB_USER passwordless sudo access by adding -e GRANT_SUDO=yes and –user root when launching the image: docker run --rm -ti -e GRANT_SUDO=yes --user root -e NB_UID=$UID -e NB_GID=100 -p 8889:8888 -v ${PWD}:/home/jovyan/work darribas/gds:4.1 start.sh 8.4 Useful Python Docker Images gds_env: a containerised platform for Geographid Data Science in Jupyter (Python &amp; R) jupyter-stacks: official Jupyter stacks (the gds_env is based on these) 8.5 Practical Follow the steps in the Remote Install section to run jupyter lab on one of the remote servers. Note that you will need to use the command line editing software nano to edit update jupyter_notebook_config.py: nano /home/jovyan/.jupyter/jupyter_notebook_config.py A guide to using nano can be found here. "],
["docker-containers-for-r.html", "Chapter 9 Docker Containers for R 9.1 Run Docker Remotely 9.2 Run Docker Locally", " Chapter 9 Docker Containers for R A widely-used suite of docker images for R has been developed by the Rocker project (Boettiger and Eddelbuettel 2017). 29 repositories of rocker’s images are listed on the docker hub providing R environments customized to perform a variety of tasks. Most of them include R studio server, allowing to work remotely from the R studio server web interface accessible through any browser. Rocker images are versioned, meaning that if you want to employ a specific version of R rather than the latest you can specify an R version tag in the image name, i.e. rocker/verse:3.4.0, if no tag is requested you will automatically pull the latest version (Boettiger and Eddelbuettel 2017). 9.1 Run Docker Remotely Docker is installed on all our shared resources. Most machines already have images that can be used for gds. An useful image for running geospatial analysis, including the tidyverse + various geospatial packages, is rocker/geospatial: You can pull the repository running the following command: docker pull rocker/geospatial Rocker/geospatial has been extended to have all libraries that GDSL members generally use -link to the image-. Once you accessed the server you can list the existing images with the following command: docker images ls check ports run command same specifics of user names and psw. docker run -e USER=&lt;your-user&gt; -e PASSWORD=&lt;your-password&gt; -e USERID=$UID -e GROUPID=$GID -d --rm -p &lt;free-port&gt;:8787 -v ${PWD}:/home/your-user rocker/geospatial With the run command you generate a container where the image is running. You can check your process with the docker ps command. As already mentioned above almost all rocker images include R studio server, therefore you can access the server-based application through its web interface. To do that, open your browser and go to the following address: &lt;host-ip&gt;:&lt;port&gt; 9.2 Run Docker Locally To run one of the rocker images locally on your laptop you need to install docker as described in - par ref - and pull the image of your choise from the docker hub. Once the image is on your local machine, you can run it with the same command as above. You can access Rstudio server running on your local host through a browser at: http://localhost:8787 References "],
["best-practices.html", "Chapter 10 Best Practices 10.1 Booking a server 10.2 Docker Considerations 10.3 System Monitoring 10.4 GPU Considerations", " Chapter 10 Best Practices 10.1 Booking a server Before booking a server look at the server information sheet to verify that the resource can meet your needs. Book the Server with our booking system detailing your name, short description of tasks, forseen resources used (i.e. gpu, cpu threads,ram) - the booking system will be either an excel file or a shared calendar. 10.2 Docker Considerations Always check what are the existing images before pulling a new one with: docker image ls To check what is running and which ports are occupied always run: docker ps 10.3 System Monitoring It is highly recommended that you monitor the systems processes during before and while running your processes. This can be done via the interactive system-monitor process-viewer and process-manager htop, which can be started by typing htop into the terminal and pressing enter: htop Things to keep an eye on: How many threads are currently being used? How much memory is available? If your process is taking longer than expected, then this may be caused by either too many processes running in parallel, or insufficient memory being available. The later can result in swap memory being used, which will significantly slow down your processes. 10.4 GPU Considerations 10.4.1 Monitoring Another resource that requires monitoring are GPUs. A GPU can be monitored using the NVIDIA System Management Interface (nvididia-smi): watch -n 0.1 nvidia-smi This interface will allow you to monitor the memory usage, volatile GPU utility, temperature and fan speed. 10.4.2 Memory Growth If there is no memory available, then it is worth enquiring with the other individual using the GPU if they are using TensorFlow and have enabled memory growth. If memory growth has not been enabled, then TensorFlow will by default allocate the all available GPU memory to a task. See the following discussion for more information. Memory growth can be enabled as follows within TensorFlow: config = tf.ConfigProto() config.gpu_options.allow_growth=True sess = tf.Session(config=config) 10.4.3 Temperature Monitoring When servers are situated within a non-air conditioned room it is also worth keeping an eye on the GPUs temperature, in particular when the server houses multiple GPUs. Bailey, Diane E, and Nancy B Kurland. 2002. “A Review of Telework Research: Findings, New Directions, and Lessons for the Study of Modern Work.” Journal of Organizational Behavior: The International Journal of Industrial, Occupational and Organizational Psychology and Behavior 23 (4): 383–400. Boettiger, Carl, and Dirk Eddelbuettel. 2017. “An Introduction to Rocker: Docker Containers for R.” The R Journal 9 (2): 527–36. https://doi.org/10.32614/RJ-2017-065. Brynjolfsson, Erik, John Horton, Adam Ozimek, Daniel Rock, Garima Sharma, and Hong Yi Tu Ye. 2020. “COVID-19 and Remote Work: An Early Look at Us Data.” Unpublished Work. Holgersen, Henning, Zhiyang Jia, and Simen Svenkerud. 2020. “Who and How Many Can Work from Home? Evidence from Task Descriptions and Norwegian Job Advertisements.” Evidence from Task Descriptions and Norwegian Job Advertisements.(April 20, 2020). Kitamura, Ryuichi, Jack M Nilles, Patrick Conroy, and David M Fleming. 1991. “Telecommuting as a Transportation Planning Measure : Initial Results of California Pilot Project Ryuichi Kitamura Reprint No . 58 of California.” Transportation Research Record 1285: 98–104. Olson, Margrethe H. 1983. “Remote Office Work: Changing Work Patterns in Space and Time.” Communications of the ACM 26 (3): 182–87. Silva, João de Abreu e, and Patrı́cia C Melo. 2018. “Does Home-Based Telework Reduce Household Total Travel? A Path Analysis Using Single and Two Worker British Households.” Journal of Transport Geography 73: 148–62. "]
]
